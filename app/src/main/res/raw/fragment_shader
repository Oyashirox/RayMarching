precision mediump float;
uniform vec4 vColor;
uniform vec2 vSize;
uniform vec3 vLight;

float N = 0.002;

vec3 camera_up = vec3(0.0, 1.0, 0.0);
vec3 camera_right = vec3(1.0, 0.0, 0.0);
vec3 camera_direction = vec3(0.0, 0.0, 1.0);
vec3 camera_origin = vec3(0.0, 0.0, -20.0);

float EPSILON = 0.0000000001;
float MAX_DIST = 500.0;
int MAX_STEP = 500;

vec4 sphere_color = vec4(1.0, 0.0, 0.0, 1.0);


vec4 computeLight(vec3 position, vec4 color) {
        vec3 normal = normalize(position);
        float factor = max(0.0, dot(normal, normalize(-vLight)));
        return color * factor;
}

float scene(vec3 position) {
    return length(position) - 12.0;
}

vec4 trace(vec3 rayDirection) {
    float distance = EPSILON;
    float step = 0.0;
    vec3 position = camera_origin;

    for (int i = 0; i < MAX_STEP; i++) {
        distance = scene(position);

        if (distance < EPSILON || step > MAX_DIST) {
            break;
        } else {
            step += distance;
            position = position + rayDirection * step;
        }
    }

    if (distance < EPSILON) {
        return computeLight(position, sphere_color);
    }

    return vec4(1.0, 0.9, 0.9, 0.9);
}

void main() {
    float u = (gl_FragCoord.x - vSize.x / 2.0) * N;
    float v = (gl_FragCoord.y - vSize.y / 2.0) * N;
    vec3 rayDirection = camera_right * u + camera_up * v + camera_direction;

    gl_FragColor = trace(rayDirection);
}